import os
import time
import threading
from dotenv import load_dotenv

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.chrome.options import Options

from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# === –ü–æ–¥–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env ===
load_dotenv()
TELEGRAM_TOKEN = os.environ["TELEGRAM_TOKEN"]

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —É—á—ë—Ç–æ–∫ –∏ –ø—Ä–æ—à–ª—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
user_credentials = {}
last_unread = {}

def send_telegram(chat_id: str, text: str):
    import requests
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    requests.post(url, data={"chat_id": chat_id, "text": text})

def check_messages(login: str, password: str, chat_id: str):
    options = Options()
    # options.add_argument("--headless")  # –≤–∫–ª—é—á–∏—Ç–µ –¥–ª—è –Ω–µ–≤–∏–¥–∏–º–æ–≥–æ —Ä–µ–∂–∏–º–∞
    driver = webdriver.Chrome(options=options)

    try:
        # 1) –õ–æ–≥–∏–Ω
        driver.get("https://cabinet.nf.uust.ru")
        time.sleep(2)
        driver.find_element(By.ID, "login").send_keys(login)
        driver.find_element(By.ID, "password").send_keys(password)
        driver.find_element(By.ID, "password").send_keys(Keys.RETURN)
        time.sleep(3)

        # 2) –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π
        driver.get("https://cabinet.nf.uust.ru/chat/index")
        time.sleep(5)  # JS-–ø–æ–¥–≥—Ä—É–∑–∫–∞

        # 3) –°–æ–±–∏—Ä–∞–µ–º –±–µ–π–¥–∂–∏ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
        badges = driver.find_elements(By.CSS_SELECTOR,
                                      "span.badge.room-unread.pull-right")
        current = {}
        for b in badges:
            txt = b.text.strip()
            if txt.isdigit() and int(txt) > 0:
                name = b.find_element(By.XPATH, "./ancestor::a")\
                        .text.replace(txt, "").strip()
                current[name] = int(txt)

    except Exception as e:
        print(f"[{chat_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
        return
    finally:
        driver.quit()

    # 4) –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ø—Ä–æ—à–ª—ã–º –∏ —à–ª—ë–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ
    prev = last_unread.get(chat_id, {})
    last_unread[chat_id] = current

    # –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ—Å—Ç–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
    if not prev:
        print(f"[{chat_id}] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {current}")
        return

    diffs = []
    for name, cnt in current.items():
        old = prev.get(name, 0)
        if cnt > old:
            diffs.append(f"{name}: +{cnt - old}")

    if diffs:
        send_telegram(chat_id, "üîî –ù–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n" + "\n".join(diffs))
    else:
        print(f"[{chat_id}] –ù–∏—á–µ–≥–æ –Ω–æ–≤–æ–≥–æ")

# --- /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cid = update.effective_chat.id
    await update.message.reply_text(
        f"–í–∞—à chat_id: {cid}\n"
        "–ù–∞—Å—Ç—Ä–æ–π–∫–∞: /set <–ª–æ–≥–∏–Ω> <–ø–∞—Ä–æ–ª—å>\n"
        "–ü—Ä–∏–º–µ—Ä: /set abc_d 1234"
    )

# --- /set –ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å ---
async def set_credentials(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    cid = str(update.effective_chat.id)
    if len(args) != 2:
        return await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /set –ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å")
    user_credentials[cid] = (args[0], args[1])
    last_unread.pop(cid, None)
    await update.message.reply_text("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞.")

# --- –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ---
def background_loop():
    while True:
        for cid, creds in user_credentials.items():
            check_messages(creds[0], creds[1], cid)
        time.sleep(60)

# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ---
if __name__ == "__main__":
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("set", set_credentials))

    threading.Thread(target=background_loop, daemon=True).start()
    app.run_polling()