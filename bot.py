import time
import threading
import traceback

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.chrome.options import Options

from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# === –í–∞—à Telegram-—Ç–æ–∫–µ–Ω ===
TELEGRAM_TOKEN = "8177925682:AAH51n-li12HXoIYF0wsNwI66xvT-h-X1uY"

# —Ö—Ä–∞–Ω–∏—Ç –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_credentials: dict[str, tuple[str, str]] = {}
# —Ö—Ä–∞–Ω–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞–∂–¥–æ–º—É —á–∞—Ç—É
last_unread: dict[str, dict[str, int]] = {}

def send_telegram(chat_id: str, text: str):
    import requests
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    requests.post(url, data={"chat_id": chat_id, "text": text})

def check_messages(login: str, password: str, chat_id: str):
    options = Options()
    # —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –æ–∫–Ω–æ –±—Ä–∞—É–∑–µ—Ä–∞:
    # options.add_argument("--headless")
    options.add_argument("--disable-gpu")
    driver = webdriver.Chrome(options=options)

    try:
        # ‚Äî‚Äî‚Äî 1) –õ–æ–≥–∏–Ω–∏–º—Å—è ‚Äî‚Äî‚Äî
        driver.get("https://cabinet.nf.uust.ru")
        time.sleep(2)
        driver.find_element(By.ID, "login").send_keys(login)
        driver.find_element(By.ID, "password").send_keys(password)
        driver.find_element(By.ID, "password").send_keys(Keys.RETURN)
        time.sleep(3)

        # ‚Äî‚Äî‚Äî 2) –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π ‚Äî‚Äî‚Äî
        driver.get("https://cabinet.nf.uust.ru/chat/index")
        time.sleep(5)  # –¥–∞—ë–º JS –ø–æ–¥–≥—Ä—É–∑–∏—Ç—å—Å—è

        # –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏
        driver.save_screenshot("last_check.png")

        # ‚Äî‚Äî‚Äî 3) –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ –∫–∞–∂–¥–æ–º—É —á–∞—Ç—É ‚Äî‚Äî‚Äî
        badges = driver.find_elements(
            By.CSS_SELECTOR, "span.badge.room-unread.pull-right"
        )
        current: dict[str,int] = {}
        for b in badges:
            txt = b.text.strip()
            if not txt.isdigit():
                continue
            cnt = int(txt)
            if cnt > 0:
                # –∏–º—è —á–∞—Ç–∞ ‚Äî —Ç–µ–∫—Å—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ <a> –±–µ–∑ —Ü–∏—Ñ—Ä
                name = (
                    b.find_element(By.XPATH, "./ancestor::a")
                     .text.replace(txt, "")
                     .strip()
                )
                current[name] = cnt

    except Exception:
        print(f"[{chat_id}] –û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ –ª–æ–≥–∏–Ω–∞/–ø–∞—Ä—Å–∏–Ω–≥–∞:")
        traceback.print_exc()
        driver.quit()
        return
    finally:
        # –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º –¥–æ –ø–æ—Å–ª–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è current
        pass

    driver.quit()

    # ‚Äî‚Äî‚Äî 4) –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º ‚Äî‚Äî‚Äî
    prev = last_unread.get(chat_id)
    last_unread[chat_id] = current  # –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    if prev is None:
        # –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî –ø—Ä–æ—Å—Ç–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
        print(f"[{chat_id}] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current}")
        return

    # –Ω–∞—Ö–æ–¥–∏–º —Ç–æ–ª—å–∫–æ —Ç–µ —á–∞—Ç—ã, –≥–¥–µ —á–∏—Å–ª–æ –≤—ã—Ä–æ—Å–ª–æ
    new_msgs: list[str] = []
    for name, cnt in current.items():
        old = prev.get(name, 0)
        if cnt > old:
            diff = cnt - old
            new_msgs.append(f"{name}: +{diff}")

    if new_msgs:
        send_telegram(chat_id,
            f"üîî –ù–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n" + "\n".join(new_msgs)
        )
    else:
        print(f"[{chat_id}] –ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç")

# ‚Äî‚Äî‚Äî –ö–æ–º–∞–Ω–¥–∞ /start ‚Äî‚Äî‚Äî
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cid = update.effective_chat.id
    await update.message.reply_text(
        f"–í–∞—à chat_id: {cid}\n"
        "–ß—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
        "/set <–ª–æ–≥–∏–Ω> <–ø–∞—Ä–æ–ª—å>\n"
        "–ü—Ä–∏–º–µ—Ä: /set agf_m 3651"
    )

# ‚Äî‚Äî‚Äî –ö–æ–º–∞–Ω–¥–∞ /set ‚Äî‚Äî‚Äî
async def set_credentials(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    cid = str(update.effective_chat.id)
    if len(args) != 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /set –ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å")
        return
    user_credentials[cid] = (args[0], args[1])
    last_unread.pop(cid, None)  # —Å–±—Ä–æ—Å–∏–º —Å—Ç–∞—Ä–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await update.message.reply_text("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞.")

# ‚Äî‚Äî‚Äî –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ‚Äî‚Äî‚Äî
def background_loop():
    while True:
        for cid, (login, pwd) in user_credentials.items():
            check_messages(login, pwd, cid)
        time.sleep(60)

# ‚Äî‚Äî‚Äî –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ‚Äî‚Äî‚Äî
if __name__ == "__main__":
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("set", set_credentials))

    threading.Thread(target=background_loop, daemon=True).start()
    app.run_polling()